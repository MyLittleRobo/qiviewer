diff --git a/browser/components/BrowserComponents.manifest b/browser/components/BrowserComponents.manifest
--- a/browser/components/BrowserComponents.manifest
+++ b/browser/components/BrowserComponents.manifest
@@ -15,16 +15,19 @@ contract @mozilla.org/uriloader/content-
 contract @mozilla.org/uriloader/content-handler;1?type=text/plain {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/gif {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/jpeg {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/jpg {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/png {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/bmp {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/x-icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/vnd.microsoft.icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
+#ifdef MOZ_WEBM
+contract @mozilla.org/uriloader/content-handler;1?type=image/webp {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
+#endif
 contract @mozilla.org/uriloader/content-handler;1?type=application/http-index-format {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler m-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler x-default @mozilla.org/browser/final-clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-validator b-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 
 # nsBrowserGlue.js
 component {eab9012e-5f74-4cbc-b2b5-a590235513cc} nsBrowserGlue.js
 contract @mozilla.org/browser/browserglue;1 {eab9012e-5f74-4cbc-b2b5-a590235513cc}
diff --git a/modules/libpr0n/build/nsImageModule.cpp b/modules/libpr0n/build/nsImageModule.cpp
--- a/modules/libpr0n/build/nsImageModule.cpp
+++ b/modules/libpr0n/build/nsImageModule.cpp
@@ -139,16 +139,19 @@ static const mozilla::Module::CategoryEn
   { "Gecko-Content-Viewers", "image/jpg", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/x-icon", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/vnd.microsoft.icon", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/bmp", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/x-ms-bmp", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/icon", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/png", "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", "image/x-png", "@mozilla.org/content/document-loader-factory;1" },
+#ifdef MOZ_WEBM
+  { "Gecko-Content-Viewers", "image/webp", "@mozilla.org/content/document-loader-factory;1" },
+#endif
   { "content-sniffing-services", "@mozilla.org/image/loader;1", "@mozilla.org/image/loader;1" },
   { NULL }
 };
 
 static nsresult
 imglib_Initialize()
 {
   // Hack: We need the gfx module to be initialized because we use gfxPlatform
diff --git a/modules/libpr0n/decoders/Makefile.in b/modules/libpr0n/decoders/Makefile.in
--- a/modules/libpr0n/decoders/Makefile.in
+++ b/modules/libpr0n/decoders/Makefile.in
@@ -46,16 +46,17 @@ MODULE = imgdecoders
 LIBRARY_NAME = imgdecoders_s
 FORCE_STATIC_LIB = 1
 MODULE_NAME = nsDecodersModule
 LIBXUL_LIBRARY  = 1
 
 
 CPPSRCS = nsPNGDecoder.cpp nsJPEGDecoder.cpp nsGIFDecoder2.cpp \
           nsBMPDecoder.cpp nsICODecoder.cpp nsIconDecoder.cpp \
+          nsWebPDecoder.cpp \
           $(NULL)
 
 CSRCS   = iccjpeg.c \
           $(NULL)
 
 # Decoders need RasterImage.h
 LOCAL_INCLUDES += -I$(topsrcdir)/modules/libpr0n/src/
 
diff --git a/modules/libpr0n/decoders/nsWebPDecoder.cpp b/modules/libpr0n/decoders/nsWebPDecoder.cpp
new file mode 100644
--- /dev/null
+++ b/modules/libpr0n/decoders/nsWebPDecoder.cpp
@@ -0,0 +1,221 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is WebP Decoder.
+ *
+ * The Initial Developer of the Original Code is Google Inc.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Aaron Kaluszka <ask@swva.net>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsWebPDecoder.h"
+
+#include "nsIInputStream.h"
+#include "RasterImage.h"
+#include "imgIContainerObserver.h"
+
+#include "yuv_convert.h"
+
+#include "prlog.h"
+
+namespace mozilla {
+namespace imagelib {
+
+#ifdef PR_LOGGING
+PRLogModuleInfo *gWebPLog = PR_NewLogModule("WebPDecoder");
+#endif
+
+nsWebPDecoder::nsWebPDecoder() :
+  mPos(0),
+  mData(nsnull),
+  mIter(nsnull)
+{ }
+
+nsWebPDecoder::~nsWebPDecoder()
+{
+  if (mData)
+    free(mData);
+}
+
+void nsWebPDecoder::InitInternal()
+{
+  // Initialize libvpx
+  if (vpx_codec_dec_init(&mDec, &vpx_codec_vp8_dx_algo, NULL, 0) != VPX_CODEC_OK) {
+    PostDecoderError(NS_ERROR_FAILURE);
+    return;
+  }
+
+  mPPCfg.post_proc_flag = VP8_NOFILTERING;
+  vpx_codec_control(&mDec, VP8_SET_POSTPROC, &mPPCfg);
+}
+
+void
+nsWebPDecoder::WriteInternal(const char *aBuffer, PRUint32 aCount)
+{
+  NS_ABORT_IF_FALSE(!HasError(), "Shouldn't call WriteInternal after error!");
+
+  // aCount = 0 means EOF, mPos = -1 means finished decoding
+  if (!aCount || mPos == -1)
+    return;
+
+  // RIFF layout is:
+  // Offset  Data
+  // 0...3   "RIFF" 4-byte tag
+  // 4...7   Size of image data (including metadata) starting at offset 8
+  // 8...11  "WEBP" Form-type signature
+  // 12..15  "VP8 " 4-byte tag describing the raw video format used
+  // 16..19  Size of the raw WebP image data, starting at offset 20
+  // 20....  The WebP bytes
+  // There can be extra chunks after the "VP8 " chunk (ICMT, ICOP, ...)
+  // All 32-bits sizes are in little-endian order.
+  // Note: chunk data must be padded to multiple of 2 in size
+  if (mPos < RIFF_HEADER_LENGTH) {
+    PRUint32 toCopy = RIFF_HEADER_LENGTH - mPos;
+    if (toCopy > aCount)
+      toCopy = aCount;
+    memcpy(mHeaderData + mPos, aBuffer, toCopy);
+    mPos += toCopy;
+    aCount -= toCopy;
+    aBuffer += toCopy;
+  }
+
+  if (mPos == RIFF_HEADER_LENGTH) {
+    if (memcmp(mHeaderData,      "RIFF", 4)) {
+      PostDataError(); // wrong image file signature
+      return;
+	}
+    if (memcmp(mHeaderData +  8, "WEBP", 4)) {
+      PostDataError(); // wrong image file signature
+      return;
+	}
+    if (memcmp(mHeaderData + 12, "VP8 ", 4)) {
+      PostDataError(); // invalid compression format
+      return;
+	}
+    mDataLength = LITTLE_TO_NATIVE32(*(PRUint32*)(mHeaderData + 16));
+    if ((mDataLength > LITTLE_TO_NATIVE32(*(PRUint32*)(mHeaderData + 4)) + 8) || (mDataLength & 1)) {
+      PostDataError(); // inconsistent size information
+      return;
+	}
+	mData = (PRUint8*)moz_malloc(mDataLength);
+	if (!mData) {
+      PostDecoderError(NS_ERROR_OUT_OF_MEMORY);
+      return;
+    }
+  }
+  
+  // XXX Currently no progressive decoding support, so grab all image data
+  if (aCount && mPos >= RIFF_HEADER_LENGTH && mPos < RIFF_HEADER_LENGTH + mDataLength) {
+    PRUint32 toCopy = RIFF_HEADER_LENGTH + mDataLength - mPos;
+    if (toCopy > aCount)
+      toCopy = aCount;
+    memcpy(mData + mPos - RIFF_HEADER_LENGTH, aBuffer, toCopy);
+    mPos += toCopy;
+    aCount -= toCopy;
+    aBuffer += toCopy;
+  }
+
+  if (mPos == RIFF_HEADER_LENGTH + mDataLength - 1) {
+    mPos = -1;
+
+    // Avoid full decode for size query
+    if (IsSizeDecode()) {
+	  vpx_codec_stream_info_t streamInfo;
+      if (vpx_codec_peek_stream_info(&vpx_codec_vp8_dx_algo, mData, mDataLength, &streamInfo) != VPX_CODEC_OK) {
+        PostDataError();
+        return;
+      }
+
+      PR_LOG(gWebPLog, PR_LOG_DEBUG, ("WebP image is %lix%lix.\n", streamInfo.w, streamInfo.h));
+      // Post our size to the superclass
+      PostSize(streamInfo.w, streamInfo.h);
+      return;
+    }
+
+    // Decode data with libvpx
+	if (vpx_codec_decode(&mDec, mData, mDataLength, NULL, 0) != VPX_CODEC_OK) {
+      PostDataError();
+      return;
+    }
+
+    // Get image frame from libvpx
+    vpx_image_t* const imageFrame = vpx_codec_get_frame(&mDec, &mIter);
+    if (!imageFrame) {
+      PostDataError();
+      return;
+    }
+
+    PR_LOG(gWebPLog, PR_LOG_DEBUG, ("WebP image is %lix%lix.\n", imageFrame->d_w, imageFrame->d_h));
+    // Post our size to the superclass
+    PostSize(imageFrame->d_w, imageFrame->d_h);
+
+    PRUint32 imageLength;
+    PRUint32* imageData;
+    nsresult rv = mImage->AppendFrame(0, 0, imageFrame->d_w, imageFrame->d_h, gfxASurface::ImageFormatARGB32, 
+                                      (PRUint8**)&imageData, &imageLength);
+    if (NS_FAILED(rv) || !imageData) {
+      PostDecoderError(NS_ERROR_FAILURE);
+      return;
+    }
+
+    // Tell the superclass we're starting a frame
+    PostFrameStart();
+
+    // Get YUV data to ARGB
+    gfx::ConvertYCbCrToRGB32(imageFrame->planes[0], imageFrame->planes[1], imageFrame->planes[2], (uint8*)imageData, 
+                             0, 0, imageFrame->d_w, imageFrame->d_h, 
+                             imageFrame->stride[0], imageFrame->stride[1], imageFrame->d_w << 2, gfx::YV12);
+
+    // Invalidate
+    nsIntRect r(0, 0, imageFrame->d_w, imageFrame->d_h);
+    PostInvalidation(r);
+  }
+}
+
+void
+nsWebPDecoder::FinishInternal()
+{
+  // We shouldn't be called in error cases
+  NS_ABORT_IF_FALSE(!HasError(), "Can't call FinishInternal on error!");
+
+  vpx_codec_destroy(&mDec);
+
+  // We should never make multiple frames
+  NS_ABORT_IF_FALSE(GetFrameCount() <= 1, "Multiple WebP frames?");
+
+  // Send notifications if appropriate
+  if (!IsSizeDecode() && (GetFrameCount() == 1)) {
+      PostFrameStop();
+      PostDecodeDone();
+  }
+}
+
+} // namespace imagelib
+} // namespace mozilla
diff --git a/modules/libpr0n/decoders/nsWebPDecoder.h b/modules/libpr0n/decoders/nsWebPDecoder.h
new file mode 100644
--- /dev/null
+++ b/modules/libpr0n/decoders/nsWebPDecoder.h
@@ -0,0 +1,86 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is WebP Decoder.
+ *
+ * The Initial Developer of the Original Code is Google Inc.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Aaron Kaluszka <ask@swva.net>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef nsWebMDecoder_h__
+#define nsWebMDecoder_h__
+
+#include "Decoder.h"
+#include "nsAutoPtr.h"
+#include "imgIDecoderObserver.h"
+#include "vpx/vpx_decoder.h"
+#include "vpx/vp8dx.h"
+
+namespace mozilla {
+namespace imagelib {
+
+class nsWebPDecoder : public Decoder
+{
+public:
+  nsWebPDecoder();
+  virtual ~nsWebPDecoder();
+
+  virtual void InitInternal();
+  virtual void WriteInternal(const char* aBuffer, PRUint32 aCount);
+  virtual void FinishInternal();
+
+private:
+
+#define RIFF_HEADER_LENGTH 20
+
+#if defined WORDS_BIGENDIAN || defined IS_BIG_ENDIAN
+#define LITTLE_TO_NATIVE32(x) (((((PRUint32) x)        & 0xFF) << 24) | \
+                              (((((PRUint32) x) >>  8) & 0xFF) << 16) | \
+                              (((((PRUint32) x) >> 16) & 0xFF) <<  8) | \
+                                (((PRUint32) x) >> 24))
+#else
+#define LITTLE_TO_NATIVE32(x) x
+#endif
+
+  PRUint32 mPos;  // Current processing position in incoming data
+  PRUint8  mHeaderData[RIFF_HEADER_LENGTH];  // Image header data
+  PRUint8 *mData;  // Pointer to WebP-encoded data
+  PRUint32 mDataLength;  // Length of WebP-encoded data
+
+  vpx_codec_ctx_t mDec;  // libvpx decoder
+  vp8_postproc_cfg_t mPPCfg; // libvpx configuration
+  vpx_codec_iter_t mIter;  // libvpx iterator
+};
+
+} // namespace imagelib
+} // namespace mozilla
+
+#endif // nsWebPDecoder_h__
diff --git a/modules/libpr0n/src/Image.cpp b/modules/libpr0n/src/Image.cpp
--- a/modules/libpr0n/src/Image.cpp
+++ b/modules/libpr0n/src/Image.cpp
@@ -92,16 +92,22 @@ Image::GetDecoderType(const char *aMimeT
     rv = eDecoderType_ico;
   else if (!strcmp(aMimeType, "image/vnd.microsoft.icon"))
     rv = eDecoderType_ico;
 
   // Icon
   else if (!strcmp(aMimeType, "image/icon"))
     rv = eDecoderType_icon;
 
+#ifdef MOZ_WEBM
+  // WebP
+  else if (!strcmp(aMimeType, "image/webp"))
+    rv = eDecoderType_webp;
+#endif
+
   return rv;
 }
 
 void
 Image::IncrementAnimationConsumers()
 {
   mAnimationConsumers++;
   EvaluateAnimation();
diff --git a/modules/libpr0n/src/Image.h b/modules/libpr0n/src/Image.h
--- a/modules/libpr0n/src/Image.h
+++ b/modules/libpr0n/src/Image.h
@@ -98,17 +98,22 @@ public:
   // Mimetype translation
   enum eDecoderType {
     eDecoderType_png     = 0,
     eDecoderType_gif     = 1,
     eDecoderType_jpeg    = 2,
     eDecoderType_bmp     = 3,
     eDecoderType_ico     = 4,
     eDecoderType_icon    = 5,
+#ifdef MOZ_WEBM
+    eDecoderType_webp    = 6,
+    eDecoderType_unknown = 7
+#else
     eDecoderType_unknown = 6
+#endif
   };
   static eDecoderType GetDecoderType(const char *aMimeType);
 
   void IncrementAnimationConsumers();
   void DecrementAnimationConsumers();
 #ifdef DEBUG
   PRUint32 GetAnimationConsumers() { return mAnimationConsumers; }
 #endif
diff --git a/modules/libpr0n/src/RasterImage.cpp b/modules/libpr0n/src/RasterImage.cpp
--- a/modules/libpr0n/src/RasterImage.cpp
+++ b/modules/libpr0n/src/RasterImage.cpp
@@ -59,16 +59,19 @@
 #include "ImageLogging.h"
 
 #include "nsPNGDecoder.h"
 #include "nsGIFDecoder2.h"
 #include "nsJPEGDecoder.h"
 #include "nsBMPDecoder.h"
 #include "nsICODecoder.h"
 #include "nsIconDecoder.h"
+#ifdef MOZ_WEBM
+#include "nsWebPDecoder.h"
+#endif
 
 #include "gfxContext.h"
 
 using namespace mozilla::imagelib;
 
 /* Accounting for compressed data */
 #if defined(PR_LOGGING)
 static PRLogModuleInfo *gCompressedImageAccountingLog = PR_NewLogModule ("CompressedImageAccounting");
@@ -2138,16 +2141,21 @@ RasterImage::InitDecoder(bool aDoSizeDec
       mDecoder = new nsBMPDecoder();
       break;
     case eDecoderType_ico:
       mDecoder = new nsICODecoder();
       break;
     case eDecoderType_icon:
       mDecoder = new nsIconDecoder();
       break;
+#ifdef MOZ_WEBM
+    case eDecoderType_webp:
+      mDecoder = new nsWebPDecoder();
+      break;
+#endif
     default:
       NS_ABORT_IF_FALSE(0, "Shouldn't get here!");
   }
 
   // Initialize the decoder
   nsCOMPtr<imgIDecoderObserver> observer(do_QueryReferent(mObserver));
   mDecoder->SetSizeDecode(aDoSizeDecode);
   mDecoder->Init(this, observer);
diff --git a/netwerk/mime/nsMimeTypes.h b/netwerk/mime/nsMimeTypes.h
--- a/netwerk/mime/nsMimeTypes.h
+++ b/netwerk/mime/nsMimeTypes.h
@@ -116,16 +116,17 @@
 #define IMAGE_XBM3                          "image/xbm"
 #define IMAGE_ART                           "image/x-jg"
 #define IMAGE_TIFF                          "image/tiff"
 #define IMAGE_BMP                           "image/bmp"
 #define IMAGE_ICO                           "image/x-icon"
 #define IMAGE_MNG                           "video/x-mng"
 #define IMAGE_JNG                           "image/x-jng"
 #define IMAGE_SVG_XML                       "image/svg+xml"
+#define IMAGE_WEBP                          "image/webp"
 
 #define MESSAGE_EXTERNAL_BODY               "message/external-body"
 #define MESSAGE_NEWS                        "message/news"
 #define MESSAGE_RFC822                      "message/rfc822"
 
 #define MULTIPART_ALTERNATIVE               "multipart/alternative"
 #define MULTIPART_APPLEDOUBLE               "multipart/appledouble"
 #define MULTIPART_DIGEST                    "multipart/digest"
diff --git a/uriloader/exthandler/nsExternalHelperAppService.cpp b/uriloader/exthandler/nsExternalHelperAppService.cpp
--- a/uriloader/exthandler/nsExternalHelperAppService.cpp
+++ b/uriloader/exthandler/nsExternalHelperAppService.cpp
@@ -509,16 +509,19 @@ static nsDefaultMimeTypeEntry defaultMim
   { TEXT_XML, "xml" },
   { APPLICATION_RDF, "rdf" },
   { TEXT_XUL, "xul" },
   { IMAGE_PNG, "png" },
   // -- end extensions used during startup
   { TEXT_CSS, "css" },
   { IMAGE_JPG, "jpeg" },
   { IMAGE_JPG, "jpg" },
+#ifdef MOZ_WEBM
+  { IMAGE_WEBP, "webp" },
+#endif
   { TEXT_HTML, "html" },
   { TEXT_HTML, "htm" },
   { APPLICATION_XPINSTALL, "xpi" },
   { "application/xhtml+xml", "xhtml" },
   { "application/xhtml+xml", "xht" },
   { TEXT_PLAIN, "txt" }
 };
 
@@ -577,16 +580,17 @@ static nsExtraMimeTypeEntry extraMimeEnt
   { TEXT_XUL, "xul", "XML-Based User Interface Language" },
   { TEXT_XML, "xml,xsl,xbl", "Extensible Markup Language" },
   { TEXT_CSS, "css", "Style Sheet" },
   { VIDEO_OGG, "ogv", "Ogg Video" },
   { VIDEO_OGG, "ogg", "Ogg Video" },
   { APPLICATION_OGG, "ogg", "Ogg Video"},
   { AUDIO_OGG, "oga", "Ogg Audio" },
 #ifdef MOZ_WEBM
+  { IMAGE_WEBP, "webp", "WebP Image" },
   { VIDEO_WEBM, "webm", "Web Media Video" },
   { AUDIO_WEBM, "webm", "Web Media Audio" },
 #endif
   { VIDEO_RAW, "yuv", "Raw YUV Video" },
   { AUDIO_WAV, "wav", "Waveform Audio" },
 };
 
 #undef MAC_TYPE
